{"componentChunkName":"component---src-templates-post-tsx","path":"/react-hook_3/","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>전체내용 : <a href=\"https://ko.reactjs.org/docs/hooks-rules.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Hook의 규칙</a>  </p>\n</blockquote>\n<h1 id=\"1-hook의-규칙\" style=\"position:relative;\"><a href=\"#1-hook%EC%9D%98-%EA%B7%9C%EC%B9%99\" aria-label=\"1 hook의 규칙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Hook의 규칙</h1>\n<blockquote>\n<p>Hook은 JavaScript함수이다. 하지만 Hook을 사용할 때는 두 가지 규칙을 준수해야 한다.<br>\nReact에서는 규칙을 자동으로 강제하기 위해 <a href=\"https://www.npmjs.com/package/eslint-plugin-react-hooks\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">linter 플러그인</a> 을 제공한다.</p>\n</blockquote>\n<br>\n<h2 id=\"1-규칙\" style=\"position:relative;\"><a href=\"#1-%EA%B7%9C%EC%B9%99\" aria-label=\"1 규칙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) 규칙</h2>\n<h3 id=\"1-최상위at-the-top-level에서만-hook을-호출해야-한다\" style=\"position:relative;\"><a href=\"#1-%EC%B5%9C%EC%83%81%EC%9C%84at-the-top-level%EC%97%90%EC%84%9C%EB%A7%8C-hook%EC%9D%84-%ED%98%B8%EC%B6%9C%ED%95%B4%EC%95%BC-%ED%95%9C%EB%8B%A4\" aria-label=\"1 최상위at the top level에서만 hook을 호출해야 한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(1) 최상위(at the Top Level)에서만 Hook을 호출해야 한다.</h3>\n<p><strong>반복문, 조건문 혹은 중첩된 함수 내에서 Hook을 호출하면 안 된다.</strong> 항상 React함수의 최상위에서 Hook을 호출해야 한다.<br>\n→ 컴포넌트가 렌더링 될 때마다 동일한 순서로 Hook이 호출되는 것이 보장된다.<br>\n→ React가 <code class=\"language-text\">useState</code>와 <code class=\"language-text\">useEffect</code>가 여러 번 호출되는 중에도 Hook의 상태를 올바르게 유지할 있게 해준다.</p>\n<br>\n<h3 id=\"2-오직-react-함수-내에서-hook을-호출해야-한다\" style=\"position:relative;\"><a href=\"#2-%EC%98%A4%EC%A7%81-react-%ED%95%A8%EC%88%98-%EB%82%B4%EC%97%90%EC%84%9C-hook%EC%9D%84-%ED%98%B8%EC%B6%9C%ED%95%B4%EC%95%BC-%ED%95%9C%EB%8B%A4\" aria-label=\"2 오직 react 함수 내에서 hook을 호출해야 한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(2) 오직 React 함수 내에서 Hook을 호출해야 한다.</h3>\n<p>일반적인 JavaScript 함수에서 Hook을 호출하면 안 된다.<br>\n가능한 호출 방법은 <strong>React함수 컴포넌트에서 호출</strong>, <strong>Custom Hook에서 호출</strong> 두 가지이다.<br>\n→ 이 규칙을 지키면 컴포넌트의 모든 상태 관련 로직을 소스코드에서 명확하게 보이도록 할 수 있다.</p>\n<br>\n<h2 id=\"2-eslint-플러그인\" style=\"position:relative;\"><a href=\"#2-eslint-%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8\" aria-label=\"2 eslint 플러그인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2) ESLint 플러그인</h2>\n<p>위의 두 규칙을 강제하는 <code class=\"language-text\">eslint-plugin-react-hooks</code> 라는 ESLint 플러그인이 있다.</p>\n<blockquote>\n<p><code class=\"language-text\">Create React App</code>에 기본적으로 포함되어 있다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> <span class=\"token function\">npm</span> <span class=\"token function\">install</span> eslint-plugin-react-hooks --save-dev</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// ESLint 설정 파일</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token string\">\"react-hooks\"</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"rules\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token property\">\"react-hooks/rules-of-hooks\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Checks rules of Hooks</span>\n    <span class=\"token property\">\"react-hooks/exhaustive-deps\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"warn\"</span> <span class=\"token comment\">// Checks effect dependencies</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<h2 id=\"3-규칙-설명\" style=\"position:relative;\"><a href=\"#3-%EA%B7%9C%EC%B9%99-%EC%84%A4%EB%AA%85\" aria-label=\"3 규칙 설명 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3) 규칙 설명</h2>\n<p>React가 특정 state가 어떤 <code class=\"language-text\">useState</code>호출에 해당하는지 알 수 있는 이유는 <strong>React가 Hook이 호출되는 순서에 의존하기 때문</strong>이다. 모든 렌더링에서 Hook의 호출 순서는 같기 때문에 올바르게 동작할 수 있다.</p>\n<p>하지만, Hook을 조건문 안에서 호출한다면 (첫 번째 규칙을 깸) Hook을 건너뛰는 경우가 생길 수 있고 <strong>Hook을 호출하는 순서가 달라</strong>지게 된다. 이에 따라 건너뛴 Hook 다음에 호출되는 Hook이 순서가 하나씩 밀리면서 <strong>버그를 발생</strong>시킨다.<br>\n⇒ 컴포넌트 최상위에서만 Hook을 호출하는 이유</p>\n<p>만약 조건부로 effect를 실행하길 원한다면, <strong>조건문을 Hook 내부에</strong> 넣으면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">persistForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 👍 더 이상 첫 번째 규칙을 어기지 않습니다</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">!==</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'formData'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br>\n<br>\n<h1 id=\"2-자신만의-hook-만들기\" style=\"position:relative;\"><a href=\"#2-%EC%9E%90%EC%8B%A0%EB%A7%8C%EC%9D%98-hook-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"2 자신만의 hook 만들기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 자신만의 Hook 만들기</h1>\n<p>자신만의 Hook을 만들면 컴포넌트 로직을 함수로 뽑아내어 재사용 할 수 있다.</p>\n<h2 id=\"1-상태-관련-로직을-컴포넌트에서-공유하는-방법\" style=\"position:relative;\"><a href=\"#1-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A0%A8-%EB%A1%9C%EC%A7%81%EC%9D%84-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%97%90%EC%84%9C-%EA%B3%B5%EC%9C%A0%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"1 상태 관련 로직을 컴포넌트에서 공유하는 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) 상태 관련 로직을 컴포넌트에서 공유하는 방법</h2>\n<blockquote>\n<p>여기서 예시의 목표는 <code class=\"language-text\">FriendSatus</code>와 <code class=\"language-text\">FriendListItem</code> 컴포넌트에 중복되어있는 로직을 제거하는 것</p>\n</blockquote>\n<br>\n<h3 id=\"1-사용자-정의-hook-추출하기\" style=\"position:relative;\"><a href=\"#1-%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%A0%95%EC%9D%98-hook-%EC%B6%94%EC%B6%9C%ED%95%98%EA%B8%B0\" aria-label=\"1 사용자 정의 hook 추출하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(1) 사용자 정의 Hook 추출하기</h3>\n<p>두 개의 자바스크립트 함수에서 같은 로직을 공유하고자 할 때는 또 다른 함수로 분리한다. Hook또한 함수이므로 보통의 함수와 같은 방법으로 사용한다.</p>\n<p>사용자 정의 Hook은 <strong>이름이 <code class=\"language-text\">use</code>로 시작</strong>하는 자바스크립트 함수다. 사용자 Hook은 다른 Hook을 호출할 수 있다. (이름은 반드시 use로 시작해야한다. Hook규칙이 적용되는지 파악하기 위함)</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">friendID</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isOnline<span class=\"token punctuation\">,</span> setIsOnline<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token keyword\">return</span> isOnline<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 온라인 상태 여부 반환</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<h3 id=\"2-사용자-정의-hook-이용하기\" style=\"position:relative;\"><a href=\"#2-%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%A0%95%EC%9D%98-hook-%EC%9D%B4%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"2 사용자 정의 hook 이용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(2) 사용자 정의 Hook 이용하기</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">FriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> isOnline <span class=\"token operator\">=</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">FriendListItem</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> isOnline <span class=\"token operator\">=</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>사용자 정의 Hook은 React의 특별한 기능이라기 보다는 <strong>기본적으로 Hook의 디자인을 따르는 관습</strong>이다.</li>\n<li>사용자 정의 <strong>Hook의 이름은 <code class=\"language-text\">use</code>로 시작</strong>되어야 한다. 이를 따르지 않으면 특정한 함수가 그 안에서 Hook을 호출하는지 알 수 없기 때문에 Hook 규칙 위반 여부를 자동으로 체크할 수 없다.</li>\n<li><strong>같은 Hook을 사용하는 두 개의 컴포넌트는 state를 공유하지 않는다</strong>. 사용자 정의 Hook은 상태 관련 로직을 재사용하는 매커니즘일 뿐, Hook을 사용할 때마다 그 안의 <code class=\"language-text\">state</code>와 <code class=\"language-text\">effect</code>는 완전히 독립적이다.</li>\n<li>각각의 <strong>Hook에 대한 호출은 서로 독립된 state</strong>를 받는다. <code class=\"language-text\">useFriendStatus</code>를 직접적으로 호출하기 때문에 React의 관점에서 컴포넌트에서 <code class=\"language-text\">useState</code>와 <code class=\"language-text\">useEffect</code>를 호출한 것과 다름없다. 또한, 하나의 컴포넌트 안에서 <code class=\"language-text\">useState</code>와 <code class=\"language-text\">useEffect</code>를 여러 번 호출할 수 있고 이들은 모두 완전히 독립적이다.</li>\n</ul>\n<br>\n<h2 id=\"2-기타\" style=\"position:relative;\"><a href=\"#2-%EA%B8%B0%ED%83%80\" aria-label=\"2 기타 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2) 기타</h2>\n<h3 id=\"1-hook에서-hook으로-정보-전달하기\" style=\"position:relative;\"><a href=\"#1-hook%EC%97%90%EC%84%9C-hook%EC%9C%BC%EB%A1%9C-%EC%A0%95%EB%B3%B4-%EC%A0%84%EB%8B%AC%ED%95%98%EA%B8%B0\" aria-label=\"1 hook에서 hook으로 정보 전달하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(1) Hook에서 Hook으로 정보 전달하기</h3>\n<p>Hook은 함수이기 때문에 Hook사이에서도 정보를 전달할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 현재 선택된 친구의 ID를 recipientID state 변수에 저장하고</span>\n<span class=\"token comment\">// 사용자가 &lt;select> 선택기에 있는 다른 친구를 선택하면 이를 업데이트하는 코드</span>\n<span class=\"token comment\">// -> 지금 선택되어있는 친구의 온라인 상태여부를 알 수 있다.</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>recipientID<span class=\"token punctuation\">,</span> setRecipientID<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> isRecipientOnline <span class=\"token operator\">=</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span>recipientID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Circle</span></span> <span class=\"token attr-name\">color</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>isRecipientOnline <span class=\"token operator\">?</span> <span class=\"token string\">'green'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span>\n        <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>recipientID<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token function\">setRecipientID</span><span class=\"token punctuation\">(</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t\t...</span></code></pre></div>\n<p><code class=\"language-text\">useState</code> Hook호출은 <code class=\"language-text\">recipientID</code> state 변수의 최신값을 돌려주기 때문에 이를 <code class=\"language-text\">useFriendStatus</code> Hook에 인수로 보낼 수 있다.</p>","excerpt":"전체내용 : Hook의 규칙   1. Hook의 규칙 Hook은 JavaScript함수이다. 하지만 Hook을 사용할 때는 두 가지 규칙을 준수해야 한다. React에서는 규칙을 자동으로 강제하기 위해 linter 플러그인 을 제공한다.…","tableOfContents":"<ul>\n<li>\n<p><a href=\"/react-hook_3/#1-hook%EC%9D%98-%EA%B7%9C%EC%B9%99\">1. Hook의 규칙</a></p>\n<ul>\n<li>\n<p><a href=\"/react-hook_3/#1-%EA%B7%9C%EC%B9%99\">1) 규칙</a></p>\n<ul>\n<li><a href=\"/react-hook_3/#1-%EC%B5%9C%EC%83%81%EC%9C%84at-the-top-level%EC%97%90%EC%84%9C%EB%A7%8C-hook%EC%9D%84-%ED%98%B8%EC%B6%9C%ED%95%B4%EC%95%BC-%ED%95%9C%EB%8B%A4\">(1) 최상위(at the Top Level)에서만 Hook을 호출해야 한다.</a></li>\n<li><a href=\"/react-hook_3/#2-%EC%98%A4%EC%A7%81-react-%ED%95%A8%EC%88%98-%EB%82%B4%EC%97%90%EC%84%9C-hook%EC%9D%84-%ED%98%B8%EC%B6%9C%ED%95%B4%EC%95%BC-%ED%95%9C%EB%8B%A4\">(2) 오직 React 함수 내에서 Hook을 호출해야 한다.</a></li>\n</ul>\n</li>\n<li><a href=\"/react-hook_3/#2-eslint-%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8\">2) ESLint 플러그인</a></li>\n<li><a href=\"/react-hook_3/#3-%EA%B7%9C%EC%B9%99-%EC%84%A4%EB%AA%85\">3) 규칙 설명</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/react-hook_3/#2-%EC%9E%90%EC%8B%A0%EB%A7%8C%EC%9D%98-hook-%EB%A7%8C%EB%93%A4%EA%B8%B0\">2. 자신만의 Hook 만들기</a></p>\n<ul>\n<li>\n<p><a href=\"/react-hook_3/#1-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A0%A8-%EB%A1%9C%EC%A7%81%EC%9D%84-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%97%90%EC%84%9C-%EA%B3%B5%EC%9C%A0%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\">1) 상태 관련 로직을 컴포넌트에서 공유하는 방법</a></p>\n<ul>\n<li><a href=\"/react-hook_3/#1-%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%A0%95%EC%9D%98-hook-%EC%B6%94%EC%B6%9C%ED%95%98%EA%B8%B0\">(1) 사용자 정의 Hook 추출하기</a></li>\n<li><a href=\"/react-hook_3/#2-%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%A0%95%EC%9D%98-hook-%EC%9D%B4%EC%9A%A9%ED%95%98%EA%B8%B0\">(2) 사용자 정의 Hook 이용하기</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/react-hook_3/#2-%EA%B8%B0%ED%83%80\">2) 기타</a></p>\n<ul>\n<li><a href=\"/react-hook_3/#1-hook%EC%97%90%EC%84%9C-hook%EC%9C%BC%EB%A1%9C-%EC%A0%95%EB%B3%B4-%EC%A0%84%EB%8B%AC%ED%95%98%EA%B8%B0\">(1) Hook에서 Hook으로 정보 전달하기</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/react-hook_3/"},"frontmatter":{"title":"[React] Hook 규칙 & Custom Hook","date":"Nov 04, 2020","tags":["React"],"keywords":["리액트","기초","개념","정리","JavaScript","요약","문법","Hook","훅"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/react-hook_3/","series":[{"slug":"/react-hook_1/","title":"[React] Hook 소개 및 개요 정리","num":1},{"slug":"/react-hook_2/","title":"[React] state & effect Hook 사용하기","num":2},{"slug":"/react-hook_3/","title":"[React] Hook 규칙 & Custom Hook","num":3}],"lastmod":"0001-01-01"}}}