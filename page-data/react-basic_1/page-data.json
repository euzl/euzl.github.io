{"componentChunkName":"component---src-templates-post-tsx","path":"/react-basic_1/","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>전체내용 : <a href=\"https://ko.reactjs.org/docs/hello-world.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Hello World - React</a></p>\n</blockquote>\n<h1 id=\"1-jsx\" style=\"position:relative;\"><a href=\"#1-jsx\" aria-label=\"1 jsx permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. JSX</h1>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello, world!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위의 <strong>태그문법</strong>은 문자열, HTML이 아니다. Javascript를 확장한 문법인 <code class=\"language-text\">**JSX**</code>이다.<br>\n<code class=\"language-text\">&lt;&gt; ~ &lt;/&gt;</code> 부분\n<br><br></p>\n<h2 id=\"1-특징\" style=\"position:relative;\"><a href=\"#1-%ED%8A%B9%EC%A7%95\" aria-label=\"1 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) 특징</h2>\n<ul>\n<li>JavaScript의 모든 기능 포함</li>\n<li>UI생김새를 설명하기 위해 React와 함께 사용 권장</li>\n<li>React element를 생성함</li>\n<li>컴파일 후, JSX 표션식이 정규 JS함수 호출이 되고, JS객체로 인식됨</li>\n<li>camelCase 프로퍼티 명명 규칙 사용</li>\n<li>JSX의 중괄호{} 안에는 모든 유효한 JavaScript 표현식을 넣을 수 있음<br>\nex) name, 2+2, getName(user) , ...</li>\n</ul>\n<h3 id=\"cf-react\" style=\"position:relative;\"><a href=\"#cf-react\" aria-label=\"cf react permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>cf) React</h3>\n<p>React에서는 이벤트가 처리되는 방식, 시간에 따라 state가 변하느 방식, 화면에 표시하기 위해 데이터가 준비되는 방식 등 렌더링 로직이 본질적으로 다른 UI로직과 연결된다는 사실을 받아들인다.  </p>\n<p>기본적으로 React DOM은 JSX에 삽입된 모든 값을 렌더링하기 전에 이스케이프 한다. 모든 항목은 렌더링 되기 전에 문자열로 변환된다. (→ XSS(cross-site-scripting) 공격 방지 가능)\n<br><br></p>\n<h2 id=\"2-객체표현\" style=\"position:relative;\"><a href=\"#2-%EA%B0%9D%EC%B2%B4%ED%91%9C%ED%98%84\" aria-label=\"2 객체표현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2) 객체표현</h2>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>greeting<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t\tHello\n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">'h1'</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">{</span>className<span class=\"token operator\">:</span> <span class=\"token string\">'greeting'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">'Hello, world!'</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 두 코드는 같은 결과 (객체생성 → React 엘리먼트)</p>\n<p><br><br></p>\n<h1 id=\"2-엘리먼트-element-렌더링\" style=\"position:relative;\"><a href=\"#2-%EC%97%98%EB%A6%AC%EB%A8%BC%ED%8A%B8-element-%EB%A0%8C%EB%8D%94%EB%A7%81\" aria-label=\"2 엘리먼트 element 렌더링 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 엘리먼트 (Element) 렌더링</h1>\n<h2 id=\"1-엘리먼트\" style=\"position:relative;\"><a href=\"#1-%EC%97%98%EB%A6%AC%EB%A8%BC%ED%8A%B8\" aria-label=\"1 엘리먼트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) 엘리먼트</h2>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">이것이 엘리먼트다.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>React 앱의 가장 작은 단위</li>\n<li><strong>엘리먼트는 화면에 표시할 내용 기술한다.</strong></li>\n<li>특정 시점의 UI (영화에서의 하나의 프레임과 비슷)</li>\n<li>일반 객체 (Plain object). 쉽게 생성 가능</li>\n<li>React DOM은 React엘리먼트와 일치하도록 DOM업데이트</li>\n<li>엘리먼트는 컴포넌트의 구성요소\n<br><br></li>\n</ul>\n<h2 id=\"2-dom에-엘리먼트-렌더링\" style=\"position:relative;\"><a href=\"#2-dom%EC%97%90-%EC%97%98%EB%A6%AC%EB%A8%BC%ED%8A%B8-%EB%A0%8C%EB%8D%94%EB%A7%81\" aria-label=\"2 dom에 엘리먼트 렌더링 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2) DOM에 엘리먼트 렌더링</h2>\n<p>HTML 파일 어딘가에 있는 <strong><code class=\"language-text\">&lt;div&gt;</code></strong></p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>이 안에 들어가는 모든 엘리먼트를 React DOM에서 관리함 ⇒ <code class=\"language-text\">루트DOM노드</code> 라고 부른다.</p>\n<ul>\n<li>React로 구현된 애플리케이션은 보통 하나의 루트DOM노드가 있다. (여러 개의 독립된 루트DOM노드가 있을 수도)</li>\n<li>\n<p>React 엘리먼트를 루트DOM노드에 렌더링 하려면, 둘 다 <code class=\"language-text\">ReactDOM.render( )</code> 로 전달</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementByID</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><br><br></p>\n</li>\n</ul>\n<h2 id=\"3-렌더링-된-엘리먼트-업데이트\" style=\"position:relative;\"><a href=\"#3-%EB%A0%8C%EB%8D%94%EB%A7%81-%EB%90%9C-%EC%97%98%EB%A6%AC%EB%A8%BC%ED%8A%B8-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8\" aria-label=\"3 렌더링 된 엘리먼트 업데이트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3) 렌더링 된 엘리먼트 업데이트</h2>\n<p>React 엘리먼트는 불변객체이다. (생성이후에는 자식, 속성을 변경할 수 없음)\n오직 특정 시점의 UI를 보여준다.\n따라서, 여기까지 기준으로 UI를 업데이트하기 위해서는 새로운 엘리먼트를 생성하고, ReactDOM.render()로 전달하는 방법 뿐!</p>\n<blockquote>\n<p>실제로 대부분의 React앱은 <code class=\"language-text\">ReactDOM.render()</code>를 한 번만 호출한다.  </p>\n</blockquote>\n<br>\n<h2 id=\"4-변경된-부분만-업데이트\" style=\"position:relative;\"><a href=\"#4-%EB%B3%80%EA%B2%BD%EB%90%9C-%EB%B6%80%EB%B6%84%EB%A7%8C-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8\" aria-label=\"4 변경된 부분만 업데이트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4) 변경된 부분만 업데이트</h2>\n<p><strong>React DOM</strong>는 DOM을 원하는 상태로 만드는데 필요한 경우에만(ex. 변화가 생긴) DOM을 업데이트한다.\n<br><br></p>\n<h1 id=\"3-components-and-props\" style=\"position:relative;\"><a href=\"#3-components-and-props\" aria-label=\"3 components and props permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Components and Props</h1>\n<h2 id=\"1-컴포넌트\" style=\"position:relative;\"><a href=\"#1-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8\" aria-label=\"1 컴포넌트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) 컴포넌트</h2>\n<ul>\n<li>UI를 재사용 가능한 개별적인 여러 조각으로 나누고, 각 조각을 개별적으로 살펴볼 수 있다.</li>\n<li>개념적으로 JavaScript의 함수와 유사함</li>\n<li><code class=\"language-text\">props(속성을 나타내는 데이터)</code> 라는 객체 인자를 받아  <code class=\"language-text\">React 엘리먼트</code>로 반환</li>\n<li><strong>컴포넌트의 이름은 항상 대문자로 시작한다.</strong>  </li>\n</ul>\n<p>컴포넌트를 정의하는 아래의 두 가지 방법은 동일하다.<br>\n<strong>1. JavaScript함수로 정의하는 방법</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Welcome</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>\"함수 컴포넌트\"라고 호칭함\n<br></p>\n<p><strong>2. ES6 class를 사용하여 정의하는 방법</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Welcome</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><br><br></p>\n<h3 id=\"1-컴포넌트-렌더링\" style=\"position:relative;\"><a href=\"#1-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EB%A0%8C%EB%8D%94%EB%A7%81\" aria-label=\"1 컴포넌트 렌더링 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(1) 컴포넌트 렌더링</h3>\n<p>React 엘리먼트는 사용자 정의 컴포넌트로도 나타낼 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Welcome</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Sara<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 여기서 props -> {name: 'Sara'}</span></code></pre></div>\n<p>React가 사용자 정의 컴포넌트로 작성한 엘리먼트를 발견하면 JSX어트리뷰트와 자식을 해당 컴포넌트(여기서는 <code class=\"language-text\">Welcome</code>)에 단일 객체로 전달한다. 이 객체를 <code class=\"language-text\">&quot;props&quot;</code>라고 한다.<br>\n이때, <strong>props의 이름</strong>은 사용될 context가 아닌 <strong>컴포넌트 자체의 관점</strong>에서 짓는 것을 권장한다. (ex. name이라는 props 이름은 Welcome 컴포넌트의 관점!)\n<br><br></p>\n<h3 id=\"2-컴포넌트-합성\" style=\"position:relative;\"><a href=\"#2-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%ED%95%A9%EC%84%B1\" aria-label=\"2 컴포넌트 합성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(2) 컴포넌트 합성</h3>\n<ul>\n<li>컴포넌트는 자신의 출력에 다른 컴포넌트를 참조할 수 있다.</li>\n<li>일반적으로 새 React 앱은 최상위에 단일 App 컴포넌트를 갖고 있다.\n<br><br></li>\n</ul>\n<h3 id=\"3-컴포넌트-추출\" style=\"position:relative;\"><a href=\"#3-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%B6%94%EC%B6%9C\" aria-label=\"3 컴포넌트 추출 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(3) 컴포넌트 추출</h3>\n<ul>\n<li>컴포넌트를 여러 개의 작은 컴포넌트로 나누기</li>\n<li>구성요소들을 모두 중첩하는 구조보다, 몇 가지 컴포넌트로 나누는 것을 추천한다.<br>\n(컴포넌트를 변경하고 구성요소들을 재사용하기 편해진다.)\n<br><br></li>\n</ul>\n<h2 id=\"2-props는-읽기-전용\" style=\"position:relative;\"><a href=\"#2-props%EB%8A%94-%EC%9D%BD%EA%B8%B0-%EC%A0%84%EC%9A%A9\" aria-label=\"2 props는 읽기 전용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2) Props는 읽기 전용</h2>\n<ul>\n<li>컴포넌트에서는 자체 props를 수정해서는 안 된다!!</li>\n<li>\n<p>모든 React 컴포넌트는 <strong>자신의 props를 다룰 때 반드시 순수 함수처럼 동작</strong>해야 한다.  </p>\n<blockquote>\n<p>순수함수 : 입력값을 바꾸지 않고, 항상 동일한 입력값에 대해 동일한 결과를 반환하는 함수</p>\n</blockquote>\n</li>\n</ul>\n<p><br><br></p>\n<h1 id=\"4-state와-생명주기\" style=\"position:relative;\"><a href=\"#4-state%EC%99%80-%EC%83%9D%EB%AA%85%EC%A3%BC%EA%B8%B0\" aria-label=\"4 state와 생명주기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. State와 생명주기</h1>\n<p>props와 유사하지만, 비공개이며 컴포넌트에 의해 완전히 제어된다.\n<br><br></p>\n<h2 id=\"1-클래스-컴포넌트로-state를-사용할-수-있다\" style=\"position:relative;\"><a href=\"#1-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%A1%9C-state%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8B%A4\" aria-label=\"1 클래스 컴포넌트로 state를 사용할 수 있다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) 클래스 컴포넌트로 state를 사용할 수 있다.</h2>\n<p>ES6 class로 컴포넌트를 사용한다.<br>\nrender메서드는 업데이트가 발생할 때마다 호출되지만, 같은 DOM노드로 해당 클래스(ex. <code class=\"language-text\">&lt;Clock /&gt;</code>)를 렌더링하는 경우, 그 클래스의 단일 인스턴스만 사용된다.<br>\n이를 통해 <strong>로컬 state</strong>, <strong>생명주기 메서드</strong> 등과 같은 부가적인 기능을 사용할 수 있다.\n<br><br></p>\n<h3 id=\"사용방법\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%9A%A9%EB%B0%A9%EB%B2%95\" aria-label=\"사용방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사용방법</h3>\n<ol>\n<li>클래스로 컴포넌트를 작성한다.</li>\n<li>\n<p>생성자 추가 ( <strong>props 전달 방식 집중!</strong> )</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>date<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>클래스 컴포넌트는 항상 props로 기본 constructor를 호출해야 한다.</p>\n</li>\n<li><code class=\"language-text\">this.props</code> 대신 <code class=\"language-text\">this.state</code> 사용</li>\n<li>props를 삭제한다.\n<code class=\"language-text\">&lt;Welcome name=&quot;Sara&quot; /&gt;</code>  → <code class=\"language-text\">&lt;Welcome /&gt;</code>\n<br><br></li>\n</ol>\n<h2 id=\"2-생명주기메서드-추가하기\" style=\"position:relative;\"><a href=\"#2-%EC%83%9D%EB%AA%85%EC%A3%BC%EA%B8%B0%EB%A9%94%EC%84%9C%EB%93%9C-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0\" aria-label=\"2 생명주기메서드 추가하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2) 생명주기메서드 추가하기</h2>\n<p>생명주기 메서드를 이용해서 컴포넌트가 마운트되거나 언마운트 될 때 일부 코드를 작동할 수 있다.</p>\n<ul>\n<li><code class=\"language-text\">componentDidMount()</code> 컴포넌트 출력물이 DOM에 렌더링 된 후에 실행된다.</li>\n<li><code class=\"language-text\">componentWillUnmount()</code></li>\n<li><code class=\"language-text\">this.setState()</code> 컴포넌트 로컬 state 업데이트\n<br><br></li>\n</ul>\n<h3 id=\"사용방법-예시\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%9A%A9%EB%B0%A9%EB%B2%95-%EC%98%88%EC%8B%9C\" aria-label=\"사용방법 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사용방법 예시</h3>\n<p>다음 링크의 예시 참고 <a href=\"https://codepen.io/gaearon/pen/amqdNA?editors=0010\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Hello World in React</a>  </p>\n<ol>\n<li><code class=\"language-text\">&lt;Clock /&gt;</code> 가 <code class=\"language-text\">ReactDOM.render()</code>로 전달되었을 때 React가 Clock 컴포넌트의 <code class=\"language-text\">constructor</code>을 호출한다.</li>\n<li>Clock컴포넌트의 <code class=\"language-text\">render()</code> 메서드 호출 → React는 화면에 표시될 내용을 알게 됨 → DOM 업데이트</li>\n<li>Clock출력값이 DOM에 삽입되면 <code class=\"language-text\">componentDidMount()</code> 메서드 호출 → 이 안에서 매초 <code class=\"language-text\">tick()</code> 메서드르를 호출하기 위한 타이머를 설정하도록 브라우저에 요청</li>\n<li>매초 브라우저가 <code class=\"language-text\">tick()</code> 메서드 호출함. → 이 안에서 <code class=\"language-text\">setState()</code>에 현재 시각을 포함하는 객체를 호출하면서 UI 업데이트 → React는 <code class=\"language-text\">state</code>가 변경된 것을 인지 (setState()덕분) → 화면에 표시될 내용을 알아내기 위해 <code class=\"language-text\">render()</code> 다시 호출 → 이 때 render() 안의 <code class=\"language-text\">this.state.date</code>가 달라짐. → 렌더링 출력값은 업데이트된 시각을 포함 → React는 이것을 따라 <strong>DOM업데이트</strong> 함</li>\n<li>Clock 컴포넌트가 DOM으로부터 삭제되면 <code class=\"language-text\">componentWillUnmount()</code> 메서드 호출 (타이머를 멈추기 위해)\n<br><br></li>\n</ol>\n<h2 id=\"3-state를-올바르게-사용하기\" style=\"position:relative;\"><a href=\"#3-state%EB%A5%BC-%EC%98%AC%EB%B0%94%EB%A5%B4%EA%B2%8C-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"3 state를 올바르게 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3) State를 올바르게 사용하기</h2>\n<ol>\n<li>State를 직접 수정하는 대신 <code class=\"language-text\">setState()</code> 사용한다. <code class=\"language-text\">this.state</code>를 지정할 수 있는 유일한 공간은 <code class=\"language-text\">constructor</code></li>\n<li>state업데이트는 비동기적일 수 있다. 이때 발생하는 업데이트 실패 문제를 해결하기 위해 <code class=\"language-text\">setState((state, props) ⇒ ( &lt;내용&gt; );</code> 사용</li>\n<li>state의 독립적인 변수들은 별도의 <code class=\"language-text\">setState()</code> 호출로 독립적으로 업데이트 할 수 있다.\n<br><br></li>\n</ol>\n<h2 id=\"4-기타-특징\" style=\"position:relative;\"><a href=\"#4-%EA%B8%B0%ED%83%80-%ED%8A%B9%EC%A7%95\" aria-label=\"4 기타 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4) 기타 특징</h2>\n<ul>\n<li>컴포넌트는 자신의 state를 자식 컴포넌트에 props로 전달할 수 있다.</li>\n</ul>","excerpt":"전체내용 : Hello World - React 1. JSX 위의 태그문법은 문자열, HTML이 아니다. Javascript를 확장한 문법인 이다.  부분\n 1) 특징 JavaScript의 모든 기능 포함 UI생김새를 설명하기 위해 React…","tableOfContents":"<ul>\n<li>\n<p><a href=\"/react-basic_1/#1-jsx\">1. JSX</a></p>\n<ul>\n<li>\n<p><a href=\"/react-basic_1/#1-%ED%8A%B9%EC%A7%95\">1) 특징</a></p>\n<ul>\n<li><a href=\"/react-basic_1/#cf-react\">cf) React</a></li>\n</ul>\n</li>\n<li><a href=\"/react-basic_1/#2-%EA%B0%9D%EC%B2%B4%ED%91%9C%ED%98%84\">2) 객체표현</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/react-basic_1/#2-%EC%97%98%EB%A6%AC%EB%A8%BC%ED%8A%B8-element-%EB%A0%8C%EB%8D%94%EB%A7%81\">2. 엘리먼트 (Element) 렌더링</a></p>\n<ul>\n<li><a href=\"/react-basic_1/#1-%EC%97%98%EB%A6%AC%EB%A8%BC%ED%8A%B8\">1) 엘리먼트</a></li>\n<li><a href=\"/react-basic_1/#2-dom%EC%97%90-%EC%97%98%EB%A6%AC%EB%A8%BC%ED%8A%B8-%EB%A0%8C%EB%8D%94%EB%A7%81\">2) DOM에 엘리먼트 렌더링</a></li>\n<li><a href=\"/react-basic_1/#3-%EB%A0%8C%EB%8D%94%EB%A7%81-%EB%90%9C-%EC%97%98%EB%A6%AC%EB%A8%BC%ED%8A%B8-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8\">3) 렌더링 된 엘리먼트 업데이트</a></li>\n<li><a href=\"/react-basic_1/#4-%EB%B3%80%EA%B2%BD%EB%90%9C-%EB%B6%80%EB%B6%84%EB%A7%8C-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8\">4) 변경된 부분만 업데이트</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/react-basic_1/#3-components-and-props\">3. Components and Props</a></p>\n<ul>\n<li>\n<p><a href=\"/react-basic_1/#1-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8\">1) 컴포넌트</a></p>\n<ul>\n<li><a href=\"/react-basic_1/#1-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EB%A0%8C%EB%8D%94%EB%A7%81\">(1) 컴포넌트 렌더링</a></li>\n<li><a href=\"/react-basic_1/#2-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%ED%95%A9%EC%84%B1\">(2) 컴포넌트 합성</a></li>\n<li><a href=\"/react-basic_1/#3-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%B6%94%EC%B6%9C\">(3) 컴포넌트 추출</a></li>\n</ul>\n</li>\n<li><a href=\"/react-basic_1/#2-props%EB%8A%94-%EC%9D%BD%EA%B8%B0-%EC%A0%84%EC%9A%A9\">2) Props는 읽기 전용</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/react-basic_1/#4-state%EC%99%80-%EC%83%9D%EB%AA%85%EC%A3%BC%EA%B8%B0\">4. State와 생명주기</a></p>\n<ul>\n<li>\n<p><a href=\"/react-basic_1/#1-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%A1%9C-state%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8B%A4\">1) 클래스 컴포넌트로 state를 사용할 수 있다.</a></p>\n<ul>\n<li><a href=\"/react-basic_1/#%EC%82%AC%EC%9A%A9%EB%B0%A9%EB%B2%95\">사용방법</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/react-basic_1/#2-%EC%83%9D%EB%AA%85%EC%A3%BC%EA%B8%B0%EB%A9%94%EC%84%9C%EB%93%9C-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0\">2) 생명주기메서드 추가하기</a></p>\n<ul>\n<li><a href=\"/react-basic_1/#%EC%82%AC%EC%9A%A9%EB%B0%A9%EB%B2%95-%EC%98%88%EC%8B%9C\">사용방법 예시</a></li>\n</ul>\n</li>\n<li><a href=\"/react-basic_1/#3-state%EB%A5%BC-%EC%98%AC%EB%B0%94%EB%A5%B4%EA%B2%8C-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">3) State를 올바르게 사용하기</a></li>\n<li><a href=\"/react-basic_1/#4-%EA%B8%B0%ED%83%80-%ED%8A%B9%EC%A7%95\">4) 기타 특징</a></li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/react-basic_1/"},"frontmatter":{"title":"[React] Hello World 안내서 정리 (1/2)","date":"Oct 31, 2020","tags":["React"],"keywords":["리액트","기초","개념","정리","JavaScript","요약","문법"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/react-basic_1/","series":[{"slug":"/react-basic_1/","title":"[React] Hello World 안내서 정리 (1/2)","num":1},{"slug":"/react-basic_2/","title":"[React] Hello World 안내서 정리 (2/2)","num":2}],"lastmod":"0001-01-01"}}}