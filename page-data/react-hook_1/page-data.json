{"componentChunkName":"component---src-templates-post-tsx","path":"/react-hook_1/","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>전체내용 : <a href=\"https://ko.reactjs.org/docs/hooks-intro.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Hook의 개요</a></p>\n</blockquote>\n<h1 id=\"1-개요\" style=\"position:relative;\"><a href=\"#1-%EA%B0%9C%EC%9A%94\" aria-label=\"1 개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 개요</h1>\n<p>Hook을 이용하면 Class를 작성할 필요 없이 <strong>상태 값(state)과 여러 React의 기능을 사용</strong>할 수 있다.</p>\n<blockquote>\n<p><strong>지원버전</strong><br>\nReact 16.8.0 이상<br>\nReact Native 0.59 이상</p>\n</blockquote>\n<br>\n<h2 id=\"1-특징\" style=\"position:relative;\"><a href=\"#1-%ED%8A%B9%EC%A7%95\" aria-label=\"1 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) 특징</h2>\n<ul>\n<li><strong>선택적 사용</strong><br>\n선택적으로 일부 컴포넌트에서 Hook사용 가능.</li>\n<li><strong>100% 이전 버전과의 호환성</strong><br>\nHook은 호환성을 깨뜨리는 변화가 없다.</li>\n<li><strong>React 컨셉을 대체하지 않는다.</strong><br>\n대신, React개념(props, state, context, refs, lifecycle, etc)에 좀 더 직관적인 API제공하고, 이 개념들을 엮기 위해 새로운 강력한 방법 제공</li>\n</ul>\n<br>\n<h2 id=\"2-동기\" style=\"position:relative;\"><a href=\"#2-%EB%8F%99%EA%B8%B0\" aria-label=\"2 동기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2) 동기</h2>\n<p>기존 React는 컴포넌트에 재사용 가능한 행동을 붙이는 방법을 제공하지 않았다. 이를 해결하기 위해 Render props, 고차 컴포넌트와 같은 패턴을 이용했다. 하지만 이런 패턴은 컴포넌트를 재구성해야 하며 코드를 추적하기 어렵게 만들었다. 따라서 React는 <strong>상태 관련 로직을 공유하기 위해 좀 더 좋은 기초 요소가 필요</strong>했다.\n<br></p>\n<p><strong>Hook을 사용하면,</strong><br>\n컴포넌트로부터 상태 관련 로직을 추상화할 수 있다. 이는 독립적인 테스트와 재사용이 가능하다. <strong>Hook은 계층 변화 없이 상태 관련 로직을 재사용할 수 있도록 도와준다.</strong><br>\n→ Hook을 공유하기 쉬워진다.</p>\n<br>\n<br>\n<h2 id=\"3-hook-이전의-문제점\" style=\"position:relative;\"><a href=\"#3-hook-%EC%9D%B4%EC%A0%84%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90\" aria-label=\"3 hook 이전의 문제점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3) Hook 이전의 문제점</h2>\n<h3 id=\"1-복잡한-컴포넌트들은-이해하기-어렵다\" style=\"position:relative;\"><a href=\"#1-%EB%B3%B5%EC%9E%A1%ED%95%9C-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%93%A4%EC%9D%80-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-%EC%96%B4%EB%A0%B5%EB%8B%A4\" aria-label=\"1 복잡한 컴포넌트들은 이해하기 어렵다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(1) 복잡한 컴포넌트들은 이해하기 어렵다</h3>\n<p>각 생명주기 메서드는 자주 관련 없는 로직이 섞여 있다. 예를들어, <code class=\"language-text\">componentDidMount</code> 메서드에서 이벤트 리스너를 설정하는 것과 관계없는 일부 로직이 포함되거나, <code class=\"language-text\">componentWillUnmount</code>에서 cleanup을 수행하기도 한다. 이런 점으로 인해 버그가 쉽게 발생하고 무결성을 쉽게 해친다.</p>\n<p>위와 같은 사례 안에서 상태 관련 로직이 모든 공간에 있기 때문에 이러한 컴포넌트들을 작게 만드는 것은 불가능하고 테스트하기 어렵다.<br>\n<em>(← 많은 사람이 React를 별도의 상태 관리 라이브러리와 함께 결합해서 사용하는 이유 중 하나)</em></p>\n<p>그러나, 종종 상태 관리 라이브러리는 너무 많은 추상화를 하고, 다른 파일들 사이에서 건너뛰기를 요구하며 컴포넌트 재사용을 더욱더 어렵게 만든다.</p>\n<p>이를 해결하기 위해, 생명주기 메서드를 기반으로 쪼개는 데 초점을 맞추는 대신, Hook을 통해 로직에 기반을 둔 작은 함수로 컴포넌트를 나눌 수 있다.</p>\n<br>\n<h3 id=\"2-class는-사람과-기계를-혼동시킨다\" style=\"position:relative;\"><a href=\"#2-class%EB%8A%94-%EC%82%AC%EB%9E%8C%EA%B3%BC-%EA%B8%B0%EA%B3%84%EB%A5%BC-%ED%98%BC%EB%8F%99%EC%8B%9C%ED%82%A8%EB%8B%A4\" aria-label=\"2 class는 사람과 기계를 혼동시킨다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(2) Class는 사람과 기계를 혼동시킨다</h3>\n<p>Class는 코드의 재사용성과 코드 구성을 더 어렵게 만든다. 또한, 잘 축소되지 않고, 핫 리로딩을 깨지기 쉽고 신뢰할 수 없게 만든다. 이에 React개발자들은 코드가 최적화 가능한 경로에서 유지될 가능성이 더 높은 API를 제공하고 싶었다.</p>\n<p>따라서, <strong>Hook은 Class없이 React기능들을 사용하는 방법을 알려준다</strong>. Hook은 명령형 코드로 해결책을 찾을 수 있게 해준다. 개념적으로 React컴포넌트는 항상 함수에 더 가깝다. Hook은  React의 정신을 희생하지 않고 함수를 받아들인다.</p>\n<br>\n<br>\n<h1 id=\"2-hook-이-뭔가요-\" style=\"position:relative;\"><a href=\"#2-hook-%EC%9D%B4-%EB%AD%94%EA%B0%80%EC%9A%94-\" aria-label=\"2 hook 이 뭔가요  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Hook 이 뭔가요 ?</h1>\n<h2 id=\"1-hook-개념\" style=\"position:relative;\"><a href=\"#1-hook-%EA%B0%9C%EB%85%90\" aria-label=\"1 hook 개념 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) Hook 개념</h2>\n<p>Hook은 함수 컴포넌트에서 React state와 생명주기 기능(lifecycle features)을 <strong>연동(hook into)</strong>할 수 있게 해주는 <strong>함수</strong>이다. class안에서는 동작하지 않는 대신, class없이 react를 사용할 수 있게 해준다.</p>\n<p>React는 useState와 같은 내장 Hook을 몇 가지 제공한다. 컴포넌트 간에 상태 관련 로직을 재사용하기 위해 Hook을 직접 만드는 것도 가능하다.</p>\n<br>\n<h2 id=\"2-hook-사용-규칙\" style=\"position:relative;\"><a href=\"#2-hook-%EC%82%AC%EC%9A%A9-%EA%B7%9C%EC%B9%99\" aria-label=\"2 hook 사용 규칙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2) Hook 사용 규칙</h2>\n<p>Hook은 JavaScript함수이지만, 두 가지 규칙을 준수해야 한다. 이 규칙들을 강제하기 위해 <code class=\"language-text\">linter plugin</code>을 제공한다.</p>\n<h3 id=\"1-최상위at-the-top-level에서만-hook을-호출해야-한다\" style=\"position:relative;\"><a href=\"#1-%EC%B5%9C%EC%83%81%EC%9C%84at-the-top-level%EC%97%90%EC%84%9C%EB%A7%8C-hook%EC%9D%84-%ED%98%B8%EC%B6%9C%ED%95%B4%EC%95%BC-%ED%95%9C%EB%8B%A4\" aria-label=\"1 최상위at the top level에서만 hook을 호출해야 한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(1) 최상위(at the top level)에서만 Hook을 호출해야 한다.</h3>\n<p>반복문, 조건문, 중첩된 함수 내에서 Hook 실행 금지</p>\n<h3 id=\"2-react-함수-컴포넌트-내에서만-hook을-호출해야-한다\" style=\"position:relative;\"><a href=\"#2-react-%ED%95%A8%EC%88%98-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EB%82%B4%EC%97%90%EC%84%9C%EB%A7%8C-hook%EC%9D%84-%ED%98%B8%EC%B6%9C%ED%95%B4%EC%95%BC-%ED%95%9C%EB%8B%A4\" aria-label=\"2 react 함수 컴포넌트 내에서만 hook을 호출해야 한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(2) React 함수 컴포넌트 내에서만 Hook을 호출해야 한다.</h3>\n<p>일반 JavaScript함수에서는 Hook을 호출하면 안 된다.\n(단, 직접 작성한 custom Hook 내부에서는 Hook 호출 가능)</p>\n<br>\n<br>\n<h1 id=\"3-기본-내장-hook\" style=\"position:relative;\"><a href=\"#3-%EA%B8%B0%EB%B3%B8-%EB%82%B4%EC%9E%A5-hook\" aria-label=\"3 기본 내장 hook permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 기본 내장 Hook</h1>\n<h2 id=\"1-state-hook-usestate\" style=\"position:relative;\"><a href=\"#1-state-hook-usestate\" aria-label=\"1 state hook usestate permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) State Hook (=useState)</h2>\n<h3 id=\"1-state-변수-선언\" style=\"position:relative;\"><a href=\"#1-state-%EB%B3%80%EC%88%98-%EC%84%A0%EC%96%B8\" aria-label=\"1 state 변수 선언 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(1) state 변수 선언</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// \"count\"라는 새 상태 변수 선언</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">...</span></code></pre></div>\n<p>useState가 Hook이다!<br>\nHook을 호출해 함수 컴포넌트 안에  state를 추가한 모습이다. 이 state는 컴포넌트가 다시 렌더링 되어도 그대로 유지된다. <em>(class의 this.setState와 유사하지만, 이전 state와 새로운 state를 합치지 않는다는 차이가 있다.)</em><br>\nuseState는 인자로 초기 state값을 하나 받는다. 초기값은 첫 번째 렌더링에만 딱 한 번 사용된다.<br>\nHook의 state는 객체일 필요가 없다. (원한다면 객체로도 가능)\n<br></p>\n<h3 id=\"2-여러-state-변수-선언\" style=\"position:relative;\"><a href=\"#2-%EC%97%AC%EB%9F%AC-state-%EB%B3%80%EC%88%98-%EC%84%A0%EC%96%B8\" aria-label=\"2 여러 state 변수 선언 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(2) 여러 state 변수 선언</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">ExampleWithManyStates</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// 상태 변수 여러개 선언!</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>age<span class=\"token punctuation\">,</span> setAge<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>fruit<span class=\"token punctuation\">,</span> setFruit<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'banana'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>todos<span class=\"token punctuation\">,</span> setTodos<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> text<span class=\"token operator\">:</span> <span class=\"token string\">'Learn Hooks'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>배열 구조 분해(destructuring) 문법은 useState로 호출된 state 변수들을 다른 변수명으로 할당할 수 있게 해준다. React는 매번 렌더링할 때 useState가 사용된 순서대로 실행한다. (이유는 나중에 ~)</p>\n<br>\n<h2 id=\"2-effect-hook-usereffect\" style=\"position:relative;\"><a href=\"#2-effect-hook-usereffect\" aria-label=\"2 effect hook usereffect permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2) Effect Hook (=userEffect)</h2>\n<p>side effects(또는 effects) : React 컴포넌트 안에서 데이터를 가져오거나 구독하고, DOM을 직접 조작하는 작업 (다른 컴포넌트에 영향을 줄 수도 있고, 렌더링 과정에서는 구현할 수 없는 작업)</p>\n<p>useEffect는 함수 컴포넌트 내에서 이런 side effects를 수행할 수 있게 해준다. (React class의 <code class=\"language-text\">componentDidMount</code>, <code class=\"language-text\">componentDidUpdate</code>, <code class=\"language-text\">componentWillUnmount</code>와 같은 목적으로 제공되지만 하나의 API로 통합된 것)</p>\n<h3 id=\"1-effect-선언\" style=\"position:relative;\"><a href=\"#1-effect-%EC%84%A0%EC%96%B8\" aria-label=\"1 effect 선언 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(1) effect 선언</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// componentDidMount, componentDidUpdate와 비슷</span>\n\t<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// 브라우저 API를 이용해 문서의 타이틀을 업데이트함</span>\n\t\tdocument<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token string\">'You clicked ${count} times'</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">...</span></code></pre></div>\n<p><code class=\"language-text\">useEffect</code>를 사용하면, React는 DOM을 바꾼 뒤에 effect 함수를 실행한다.<br>\n<code class=\"language-text\">Effects</code>는 컴포넌트 안에 선언되어있으므로 <strong>props와 state에 접근 가능</strong>하다. 기본적으로 React는 매 렌더링 이후에 effects를 실행한다. 첫 번째 렌더링도 포함해서  </p>\n<p>useState와 마찬가지로 컴포넌트 내에서 <strong>여러 개의 effect 사용 가능</strong></p>\n<blockquote>\n<p>Hook을 사용하면 구독을 추가하고 제거하는 로직과 같이 관련 있는 코드들을 모아서 작성할 수 있다.<br>\n(반면 class 컴포넌트에서는 생명주기 메서드에 각각 쪼개서 넣어야만 했다.)</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">&lt;</span>내용<span class=\"token operator\">></span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">&lt;</span>내용<span class=\"token operator\">></span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">...</span></code></pre></div>\n<br>\n<h3 id=\"2-effect-해제-optional\" style=\"position:relative;\"><a href=\"#2-effect-%ED%95%B4%EC%A0%9C-optional\" aria-label=\"2 effect 해제 optional permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(2) effect 해제 (Optional)</h3>\n<p>만약, Effect를 해제할 필요가 있다면, 해체하는 함수를 반환해주면 됨.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">FriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isOnline<span class=\"token punctuation\">,</span> setIsOnline<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleStatusChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setIsOnline</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">.</span>isOnline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isOnline <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'Loading...'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> isOnline <span class=\"token operator\">?</span> <span class=\"token string\">'Online'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'Offline'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 예시에서 컴포넌트가 unmount될 때 React는 ChatAPI에서 구독을 해지하거나, 재 렌더링이 일어나 effect를 재실행하기 전에 구독을 해지한다.</p>\n<br>\n<h2 id=\"3-다른-내장-hook\" style=\"position:relative;\"><a href=\"#3-%EB%8B%A4%EB%A5%B8-%EB%82%B4%EC%9E%A5-hook\" aria-label=\"3 다른 내장 hook permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3) 다른 내장 Hook</h2>\n<p>보편적이진 않지만 유용한 내장 Hook <a href=\"https://ko.reactjs.org/docs/hooks-reference.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Hooks API Reference</a>참고</p>\n<h3 id=\"1-usecontext\" style=\"position:relative;\"><a href=\"#1-usecontext\" aria-label=\"1 usecontext permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(1) useContext</h3>\n<p>컴포넌트를 중첩하지 않고도 React context를 구독할 수 있게 해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> locale <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>LocaleContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> theme <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>ThemeContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"2-usereducer\" style=\"position:relative;\"><a href=\"#2-usereducer\" aria-label=\"2 usereducer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(2) useReducer</h3>\n<p>복잡한 컴포넌트들의 state를 reducer로 관리할 수 있게 해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Todos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>todos<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>todosReducer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<br>\n<h1 id=\"4-나만의-hook-만들기\" style=\"position:relative;\"><a href=\"#4-%EB%82%98%EB%A7%8C%EC%9D%98-hook-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"4 나만의 hook 만들기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 나만의 Hook 만들기</h1>\n<p>개발을 할 때 상태 관련 로직을 컴포넌트 간에 재사용하고 싶은 경우, Hook은 컴포넌트 트리에 새 컴포넌트를 추가하지 않고도 가능하다.</p>\n<ul>\n<li><strong>Custom Hook은 컨벤션(convention)에 가깝다.</strong><br>\n<strong>이름이 'use'로 시작하고, 안에서 다른 Hook을 호출한다</strong>면 그 함수를 custom Hook 이라고 부를 수 있다.</li>\n<li><strong>linter플러그인이 Hook을 인식하고 버그를 찾으려면</strong><br>\n<code class=\"language-text\">useSomething</code>이라는 네이밍 컨벤션 사용</li>\n</ul>\n<br>\n<h2 id=\"custom-hook-사용-예시\" style=\"position:relative;\"><a href=\"#custom-hook-%EC%82%AC%EC%9A%A9-%EC%98%88%EC%8B%9C\" aria-label=\"custom hook 사용 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>custom Hook 사용 예시</h2>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">//friendID를 인자로 받아서 친구의 접속 상태를 반환하는 custom Hook</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">friendID</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token operator\">...</span>\n\t<span class=\"token keyword\">return</span> isOnline<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// custom Hook을 사용하는 컴포넌트</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">FriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> isOnline <span class=\"token operator\">=</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isOnline <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'Loading...'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> isOnline <span class=\"token operator\">?</span> <span class=\"token string\">'Online'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'Offline'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">FriendListItem</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> isOnline <span class=\"token operator\">=</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> color<span class=\"token operator\">:</span> isOnline <span class=\"token operator\">?</span> <span class=\"token string\">'green'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'black'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>각 컴포넌트의 state는 완전히 독립적이다. <strong>Hook은 state 그 자체가 아니라, 상태 관련 로직을 재사용하는 방법</strong>이다. 실제로 각각의 Hook 호출은 완전히 독립된 state를 가진다. 그래서 한 컴포넌트 안에서 같은 custom Hook을 두 번 쓸 수도 있다.</p>","excerpt":"전체내용 : Hook의 개요 1. 개요 Hook을 이용하면 Class를 작성할 필요 없이 상태 값(state)과 여러 React의 기능을 사용할 수 있다. 지원버전 React 16.8.0 이상 React Native 0.59 이상…","tableOfContents":"<ul>\n<li>\n<p><a href=\"/react-hook_1/#1-%EA%B0%9C%EC%9A%94\">1. 개요</a></p>\n<ul>\n<li><a href=\"/react-hook_1/#1-%ED%8A%B9%EC%A7%95\">1) 특징</a></li>\n<li><a href=\"/react-hook_1/#2-%EB%8F%99%EA%B8%B0\">2) 동기</a></li>\n<li>\n<p><a href=\"/react-hook_1/#3-hook-%EC%9D%B4%EC%A0%84%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90\">3) Hook 이전의 문제점</a></p>\n<ul>\n<li><a href=\"/react-hook_1/#1-%EB%B3%B5%EC%9E%A1%ED%95%9C-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%93%A4%EC%9D%80-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-%EC%96%B4%EB%A0%B5%EB%8B%A4\">(1) 복잡한 컴포넌트들은 이해하기 어렵다</a></li>\n<li><a href=\"/react-hook_1/#2-class%EB%8A%94-%EC%82%AC%EB%9E%8C%EA%B3%BC-%EA%B8%B0%EA%B3%84%EB%A5%BC-%ED%98%BC%EB%8F%99%EC%8B%9C%ED%82%A8%EB%8B%A4\">(2) Class는 사람과 기계를 혼동시킨다</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/react-hook_1/#2-hook-%EC%9D%B4-%EB%AD%94%EA%B0%80%EC%9A%94-\">2. Hook 이 뭔가요 ?</a></p>\n<ul>\n<li><a href=\"/react-hook_1/#1-hook-%EA%B0%9C%EB%85%90\">1) Hook 개념</a></li>\n<li>\n<p><a href=\"/react-hook_1/#2-hook-%EC%82%AC%EC%9A%A9-%EA%B7%9C%EC%B9%99\">2) Hook 사용 규칙</a></p>\n<ul>\n<li><a href=\"/react-hook_1/#1-%EC%B5%9C%EC%83%81%EC%9C%84at-the-top-level%EC%97%90%EC%84%9C%EB%A7%8C-hook%EC%9D%84-%ED%98%B8%EC%B6%9C%ED%95%B4%EC%95%BC-%ED%95%9C%EB%8B%A4\">(1) 최상위(at the top level)에서만 Hook을 호출해야 한다.</a></li>\n<li><a href=\"/react-hook_1/#2-react-%ED%95%A8%EC%88%98-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EB%82%B4%EC%97%90%EC%84%9C%EB%A7%8C-hook%EC%9D%84-%ED%98%B8%EC%B6%9C%ED%95%B4%EC%95%BC-%ED%95%9C%EB%8B%A4\">(2) React 함수 컴포넌트 내에서만 Hook을 호출해야 한다.</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/react-hook_1/#3-%EA%B8%B0%EB%B3%B8-%EB%82%B4%EC%9E%A5-hook\">3. 기본 내장 Hook</a></p>\n<ul>\n<li>\n<p><a href=\"/react-hook_1/#1-state-hook-usestate\">1) State Hook (=useState)</a></p>\n<ul>\n<li><a href=\"/react-hook_1/#1-state-%EB%B3%80%EC%88%98-%EC%84%A0%EC%96%B8\">(1) state 변수 선언</a></li>\n<li><a href=\"/react-hook_1/#2-%EC%97%AC%EB%9F%AC-state-%EB%B3%80%EC%88%98-%EC%84%A0%EC%96%B8\">(2) 여러 state 변수 선언</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/react-hook_1/#2-effect-hook-usereffect\">2) Effect Hook (=userEffect)</a></p>\n<ul>\n<li><a href=\"/react-hook_1/#1-effect-%EC%84%A0%EC%96%B8\">(1) effect 선언</a></li>\n<li><a href=\"/react-hook_1/#2-effect-%ED%95%B4%EC%A0%9C-optional\">(2) effect 해제 (Optional)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/react-hook_1/#3-%EB%8B%A4%EB%A5%B8-%EB%82%B4%EC%9E%A5-hook\">3) 다른 내장 Hook</a></p>\n<ul>\n<li><a href=\"/react-hook_1/#1-usecontext\">(1) useContext</a></li>\n<li><a href=\"/react-hook_1/#2-usereducer\">(2) useReducer</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/react-hook_1/#4-%EB%82%98%EB%A7%8C%EC%9D%98-hook-%EB%A7%8C%EB%93%A4%EA%B8%B0\">4. 나만의 Hook 만들기</a></p>\n<ul>\n<li><a href=\"/react-hook_1/#custom-hook-%EC%82%AC%EC%9A%A9-%EC%98%88%EC%8B%9C\">custom Hook 사용 예시</a></li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/react-hook_1/"},"frontmatter":{"title":"[React] Hook 소개 및 개요 정리","date":"Nov 03, 2020","tags":["React"],"keywords":["리액트","기초","개념","정리","JavaScript","요약","문법","Hook","훅"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/react-hook_1/","series":[{"slug":"/react-hook_1/","title":"[React] Hook 소개 및 개요 정리","num":1},{"slug":"/react-hook_2/","title":"[React] state & effect Hook 사용하기","num":2},{"slug":"/react-hook_3/","title":"[React] Hook 규칙 & Custom Hook","num":3}],"lastmod":"0001-01-01"}}}